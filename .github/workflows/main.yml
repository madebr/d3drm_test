name: Build

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}

    defaults:
      run:
        shell: ${{ matrix.platform.shell }}

    strategy:
        fail-fast: false
        matrix:
            platform:
                - { name: 'Windows (MSVC)',     os: windows-latest, shell: sh,  vendored: true, msvc: 1, shared: 1, static: 0, artifact: 'SDL3_image-VC-x64',
                    cmake: '-DSDLIMAGE_BACKEND_STB=OFF -DPerl_ROOT=C:/Strawberry/perl/bin/ -GNinja -DCMAKE_POLICY_DEFAULT_CMP0141=NEW -DCMAKE_MSVC_DEBUG_INFORMATION_FORMAT=ProgramDatabase -DCMAKE_EXE_LINKER_FLAGS=-DEBUG -DCMAKE_SHARED_LINKER_FLAGS=-DEBUG' }
                - { name: 'Windows (mingw32)',  os: windows-latest, shell: 'msys2 {0}', vendored: false, msystem: mingw64, msys-env: mingw-w64-x86_64 }

    steps:
      - uses: actions/checkout@v4
      - name: 'Set up MSYS2'
        if: ${{ contains(matrix.platform.shell, 'msys2') }}
        uses: msys2/setup-msys2@v2
        with:
            msystem: ${{ matrix.platform.msystem }}
            path-type: inherit
            install: >-
              ${{ matrix.platform.msys-env }}-cmake
              ${{ matrix.platform.msys-env }}-gcc
              ${{ matrix.platform.msys-env }}-ninja
      - name: 'Install Ninja'
        uses: aseprite/get-ninja@main
        if: ${{ !contains(matrix.platform.shell, 'msys2') }}
      - name: 'CMake (Configure)'
        run: |
          cmake -B build -GNinja
      - name: 'CMake (Build)'
        run: |
          cmake --build build
